;====================================================================
; Main.asm file generated by New Project wizard
;
; Created:   sex fev 12 2021
; Processor: PIC16F628A
; Compiler:  MPASM (Proteus)
; Autor: Gabriel Azevedo
;====================================================================

;====================================================================
; DEFINITIONS
;====================================================================

#include p16f628a.inc                ; Include register definition file



;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                    PAGINAÇÃO DE MEMÓRIA                         *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;DEFINIÇÃO DE COMANDOS DE USUÁRIO PARA ALTERAÇÃO DA PÁGINA DE MEMÓRIA

#DEFINE	BANK0	BCF STATUS,RP0	
#DEFINE	BANK1	BSF STATUS,RP0	

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                         VARIÁVEIS                               *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; DEFINIÇÃO DOS NOMES E ENDEREÇOS DE TODAS AS VARIÁVEIS UTILIZADAS 
; PELO SISTEMA

	CBLOCK	0x20	
					
		CONTADOR	;ARMAZENA O VALOR DA CONTAGEM
		COUNT		;ARMAZENA O VALOR DA CONTAGEM
		COUNT2		;ARMAZENA O VALOR DA CONTAGEM
		UP_DOWN		;ARMAZENA AS FLAGS DE CONTROLE
		LIG_DSLG	;ARMAZENA AS FLAGS DO LED
		HIGH_LOW	;ARMEZENA AS FLAGS DA ONDA_QUADRADA
		FILTRO		;FILTRAGEM PARA O BOTÃO
		STATUS_TEMP	;AUXILIARES PARA RECUPERAR CONTEXTO
		W_TEMP		;AUXILIARES PARA RECUPERAR CONTEXTO	

	ENDC			;FIM DO BLOCO DE MEMÓRIA		

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                        FLAGS INTERNOS                           *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

#DEFINE	CONTROLE	UP_DOWN,0	;Define a variavel para o Flag
#DEFINE LED		LIG_DSLG,0	;Define a variavel para o Flag		
#DEFINE ONDA		HIGH_LOW,0	;Define a variavel para o Flag							
							
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                         CONSTANTES                              *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

MIN			EQU	.1	;Define constante valendo 1	
MAX			EQU	.9	;Define constante valendo 9	
	
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                           ENTRADAS                              *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

#DEFINE	BOTAO	PORTB,1		;Define registro para a Entrada do bit 1 do PORTB	
	
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                       VETOR DE RESET                            *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

	ORG	0x00		; Endereço de processamentp
	GOTO	INICIO		; Vai para o endereço: INICIO 
	
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                    INÍCIO DA INTERRUPÇÃO                        *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

	ORG	0x04		; Endereço da interrupçâo
	MOVWF 	W_TEMP		; Atribui W para W_TEMP	<1 Cycle>
	SWAPF	STATUS,W	; Troca os nibbles de STATUS e armazena em W <1 Cycle>
	MOVWF	STATUS_TEMP	; Atribui STATUS para STATUS_TEMP <1 Cycle>
	
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                   TRATAMENTO DA INTERRUPÇÃO                     *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

	BTFSS   INTCON,INTF	; Pula proxima instruçâo caso FLAG 
				; da Interrupçâo RB0/INT estiver SET(1) <1(2) Cycles>
	GOTO	ONDA_TROCA	; Vai para o endereço: ONDA_TROCA <2 Cycles>
	
	BTFSC   INTCON,INTF	; Pula proxima instruçâo caso FLAG 
				; da Interrupçâo RB0/INT estiver CLEAN(2) <1(2) Cycles> 	
	GOTO	LED_TROCA	; Vai para o endereço: LED_TROCA

ONDA_TROCA	
	BTFSS	ONDA		;Pula proxima instruçâo caso ONDA estiver SET(1) <1(2) Cycle>
	GOTO 	ONDA_HIGH	;Vai para o endereço: ONDA_HIGH <2 Cycle>
	GOTO 	ONDA_LOW	;Vai para o endereço: ONDA_LOW

ONDA_HIGH
	BSF	ONDA		;Configura a FLAG HIGH_LOW para 1. <1 Cycle>
	BSF	PORTB,6		;Configura o bit 6 do PORTB como alto. <1 Cycle>
	GOTO	TESTA_1		;Vai para o endereço: TESTA_01

ONDA_LOW
	BCF	ONDA		;Configura a FLAG HIGH_LOW para 0.
	BCF	PORTB,6		;Configura o bit 7 do PORTB como baixo.
	GOTO	TESTA_1		;Vai para o endereço: TESTA_01
	
	
LED_TROCA
	BTFSS	LED		;Pula proxima instruçâo caso LED estiver SET(1)
	GOTO 	LED_ACENDE	;Vai para o endereço: LED_ACENDE
	GOTO 	LED_APAGA	;Vai para o endereço: LED_APAGA
	
LED_ACENDE
	BSF	LED		;Configura a FLAG LIG_DSLG para 1.
	BSF	PORTB,7		;Configura o bit 7 do PORTB como alto.
	BCF	INTCON,INTF	;Clear na flag da interrupção do RB0/INT
	GOTO 	FIM_INT		;Vai para o endereço: FIM_INT	

LED_APAGA
	BCF	LED		;Configura a FLAG LIG_DSLG para 0.
	BCF	PORTB,7;	;Configura o bit 7 do PORTB como baixo.
	BCF	INTCON,INTF	;Clear na flag da interrupção do RB0/INT
	GOTO 	FIM_INT		;Vai para o endereço: FIM_INT

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                  TRATA O OVERFLOW DO TMR0                       *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	
TESTA_1
	MOVF   	CONTADOR,W	;Passa o conteudo do CONTADOR para o W
	MOVWF 	COUNT		;Passa o conteudo do W para o COUNT, 
				;desta maneira não influenciamos o CONTADOR de sua rotina principal
	DECFSZ 	COUNT,W		;Desconta -1 do COUNT, se for DIFERENTE de ZERO pula a proxima instrução	
	GOTO	TESTA_2		;Vai para o endereço: TESTA_2
	MOVLW 	D'230'		;Passa um valor decimal de 153 para W
	MOVWF	COUNT2		;Passa o conteudo do W para o COUNT, 
	MOVLW 	D'230'		;Passa um valor decimal de 0 para W
	GOTO	ATRASO		;Vai para o endereço: ATRASO
	
ATRASO
	DECFSZ	COUNT2, F	;Desconta -1 do COUNT2, se for DIFERENTE de ZERO pula a proxima instrução
	GOTO	ATRASO		;Vai para o endereço: ATRASO
	GOTO 	INI_TMR		;Vai para o endereço: INI_TMR

	
TESTA_2
	MOVWF 	COUNT		;Passa o conteudo do W para o COUNT
	DECFSZ 	COUNT,W		;Desconta -1 do COUNT, se for DIFERENTE de ZERO pula a proxima instrução
	GOTO 	TESTA_3		;Vai para o endereço: TESTA_3
	MOVLW 	D'22'		;Passa um valor decimal de 22 para W
	GOTO 	INI_TMR		;Vai para o endereço: INI_TMR
	
TESTA_3
	MOVWF 	COUNT		;Passa o conteudo do W para o COUNT
	DECFSZ	COUNT,W		;Desconta -1 do COUNT, se for DIFERENTE de ZERO pula a proxima instrução
	GOTO 	TESTA_4		;Vai para o endereço: TESTA_4
	MOVLW 	D'107'		;Passa um valor decimal de 107 para W
	GOTO 	INI_TMR		;Vai para o endereço: INI_TMR
	
TESTA_4
	MOVWF 	COUNT		;Passa o conteudo do W para o COUNT
	DECFSZ 	COUNT,W		;Desconta -1 do COUNT, se for DIFERENTE de ZERO pula a proxima instrução
	GOTO 	TESTA_5		;Vai para o endereço: TESTA_5
	MOVLW 	D'151'		;Passa um valor decimal de 151 para W
	GOTO 	INI_TMR		;Vai para o endereço: INI_TMR
	
TESTA_5
	MOVWF 	COUNT		;Passa o conteudo do W para o COUNT
	DECFSZ	COUNT,W		;Desconta -1 do COUNT, se for DIFERENTE de ZERO pula a proxima instrução
	GOTO	TESTA_6		;Vai para o endereço: TESTA_6
	MOVLW   D'178'		;Passa um valor decimal de 178 para W
	GOTO 	INI_TMR		;Vai para o endereço: INI_TMR
	
TESTA_6
	MOVWF 	COUNT		;Passa o conteudo do W para o COUNT
	DECFSZ 	COUNT,W		;Desconta -1 do COUNT, se for DIFERENTE de ZERO pula a proxima instrução
	GOTO 	TESTA_7		;Vai para o endereço: TESTA_7
	MOVLW 	D'196'		;Passa um valor decimal de 196 para W
	GOTO 	INI_TMR		;Vai para o endereço: INI_TMR
	
TESTA_7
	MOVWF 	COUNT		;Passa o conteudo do W para o COUNT
	DECFSZ  COUNT,W		;Desconta -1 do COUNT, se for DIFERENTE de ZERO pula a proxima instrução
	GOTO 	TESTA_8		;Vai para o endereço: TESTA_8
	MOVLW 	D'210'		;Passa um valor decimal de 210 para W
	GOTO 	INI_TMR		;Vai para o endereço: INI_TMR
	
TESTA_8
	MOVWF 	COUNT		;Passa o conteudo do W para o COUNT
	DECFSZ  COUNT,W		;Desconta -1 do COUNT, se for DIFERENTE de ZERO pula a proxima instrução
	GOTO 	TESTA_9		;Vai para o endereço: TESTA_9
	MOVLW 	D'221'		;Passa um valor decimal de 221 para W
	GOTO 	INI_TMR		;Vai para o endereço: INI_TMR
	
TESTA_9
	MOVLW 	D'228'		;Passa um valor decimal de 228 para W
	GOTO 	INI_TMR		;Vai para o endereço: INI_TMR

	
INI_TMR
	MOVWF	TMR0		;Passa o conteudo do W para o TMR0
	BCF	INTCON,T0IF	;Clear na flag da interrupção do TMR0 <1 Cycle>
	
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                   FINAL DA INTERRUPÇÃO                          *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *	

FIM_INT
				
	SWAPF	STATUS_TEMP,W	;Atribui STATUS_TEMP para W
	MOVWF	STATUS		;Atribui W para STATUS_TEMP
	SWAPF	W_TEMP,F	;Troca os nibbles de W_TEMP e armazena em F
	SWAPF	W_TEMP,W	;Troca os nibbles de W_TEMP e armazena em W
	RETFIE			;Final da Interrupçâo
	
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                     INICIO DO PROGRAMA                          *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	
INICIO
	BANK1				
	MOVLW	B'00000000'	; Está configurando todos os pinos de TRISA como saída.
	MOVWF	TRISA		
						
	MOVLW	B'00000011'	; Está configurando o pino RB1 e RB0/INT como entrada, e o restante dos pinos como saida.
	MOVWF	TRISB		

	MOVLW	B'00000000'	; Está habilitando os resistores pull-ups. 
	MOVWF	OPTION_REG     	; Prescaler funcionando para o TMR0/Prescaler de 1:2
										
	MOVLW	B'10110000'	;Interrupções habilitadas: TMR0 OVERFLOW and EXTERNA RB0/INT
	MOVWF	INTCON		
	BANK0
	
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                     INICIALIZAÇÃO DAS VARIÁVEIS                 *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

	CLRF	PORTA		;Inicializa o PORTA dando um limpando(clear) a saída de trava de dados.
	CLRF	PORTB		;Inicializa o PORTB dando um limpando(clear) a saída de trava de dados.
	
	MOVLW	MIN		;Atribuindo Min ara W
	MOVWF	CONTADOR	;Atribuindo W para Contador
	
	BCF	CONTROLE	;Atribui Clear para o Controle
	
	
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                     ROTINA PRINCIPAL                            *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

MAIN
	MOVF	CONTADOR,W	;Atribui o valor do contador para W	
	MOVWF	PORTA		;Atribui o valor de W para o PORTA						
	MOVWF	FILTRO		;Atribui o valor de W para o FILTRO

CHECA_BT
	BTFSC	BOTAO		;Se o botão estiver SET(1) executa a proxima instrução
	GOTO	MAIN		;Redireciona parao Main
	DECFSZ	FILTRO,F	;		
	GOTO	CHECA_BT
					
TRATA_BT
	BTFSS	CONTROLE	
	GOTO	SOMA
	    					
SUBTRAI
	DECF	CONTADOR,F
	MOVLW	MIN	
	SUBWF	CONTADOR,W	
	BTFSC	STATUS,Z	
	BCF	CONTROLE		
	GOTO	ATUALIZA	
	
SOMA
	INCF	CONTADOR,F
	MOVLW	MAX		
	SUBWF	CONTADOR,W	
	BTFSC	STATUS,Z	
	BSF	CONTROLE	

ATUALIZA
	MOVF	CONTADOR,W		
	MOVWF	PORTA					
	BTFSS	BOTAO		
	GOTO	$-1		
	GOTO	MAIN
	
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                       FIM DO PROGRAMA                           *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

	END	